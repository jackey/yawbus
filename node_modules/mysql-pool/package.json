{
  "name": "mysql-pool",
  "description": "MySQL connection pool for node.js on top of node-mysql.",
  "version": "0.2.2",
  "homepage": "https://github.com/Kijewski/node-mysql-pool",
  "repository": {
    "type": "git",
    "url": "git://github.com/Kijewski/node-mysql-pool.git"
  },
  "author": {
    "name": "Rene Kijewski",
    "email": "rene.SURNAME@fu-berlin.de",
    "url": "https://github.com/Kijewski"
  },
  "main": "./",
  "directories": {
    "lib": "lib/mysql-pool"
  },
  "engines": {
    "node": ">=0.4.0"
  },
  "devDependencies": {
    "mysql": ">=0.9.2"
  },
  "readme": "<a name=\"Readme\"></a>\n<h1>node-mysql-pool</h1>\n\n<a name=\"Purpose\"></a>\n<h2>Purpose</h2>\n\nnode-mysql-pool is a MySQL [connection pool](http://en.wikipedia.org/wiki/Connection_pool)\nfor [node.js](http://nodejs.org/) on top of Felix Geisendörfer's MySQL client\n[node-mysql](https://github.com/felixge/node-mysql).\n\nUsing a connection pool instead of a single connection should render a remarkable\nspeed-up, when you have many short living connections, e.g. with message board applications.\n\n<a name=\"TOC\"></a>\n<h2>TOC</h2>\n\n* [Tutorial](#Tutorial)\n* [Current status](#Status)\n* [Contributors](#Contributors)\n* [Compatibility](#Compatibility)\n* [Installation](#Installation)\n* [API](#API)\n    * [Creation of a new pool](#NewPool)\n    * [Options](#Options)\n    * [Methods affecting all connections](#AllConnections)\n    * [Methods invoked on a single connection](#SingleConnection)\n    * [Methods unrelated to connections](#NoConnection)\n    * [event: 'error' \\(err\\)](#EventError)\n* [Todo](#Todo)\n* [Licence](#Licence)\n\n<a name=\"Tutorial\"></a>\n<h2>Tutorial</h2>\n\n```javascript\nvar MySQLPool = require(\"mysql-pool\").MySQLPool;\nvar pool = new MySQLPool({\n  poolSize: 4,\n  user:     'root',\n  password: 'root',\n  database: 'test'\n});\n\npool.query(\"SELECT 'Hello, World!' AS hello\", function(err, rows, fields) {\n  if(err) throw err;\n  console.log(rows[0].hello);\n});\n\nfor(var i = 0; i < 10; ++i) {\n  pool.query(\"SELECT SLEEP(2), ? AS i\", [i], function(err, rows, fields) {\n    if(err) throw err;\n    console.log(\"Slept: \" + rows[0].i);\n  });\n}\n```\n\nYou probably do not have to change anything if you already used\n[node-mysql](https://github.com/felixge/node-mysql/)\nor any of [its forks](https://github.com/felixge/node-mysql/network)!\n\n<a name=\"Status\"></a>\n<h2>Current status</h2>\n\nThis module is currently not backed by proper unit testing. Nevertheless I found\nit stable for my testings.\n\nIf you find an error, please file an [issue](https://github.com/Kijewski/node-mysql-pool/issues)!\n\n<a name=\"Contributors\"></a>\n<h2>Contributors</h2>\n\n* [René Kijewski](https://github.com/Kijewski)\n* [Michael Lai](https://github.com/melin)\n    (fixed [issue #1](https://github.com/Kijewski/node-mysql-pool/pull/1))\n* [Daniel Dickison](https://github.com/danieldickison)\n    (fixed [issue #3](https://github.com/Kijewski/node-mysql-pool/pull/3))\n* [dall](https://github.com/dall)\n    (spotted [issue #5](https://github.com/Kijewski/node-mysql-pool/issues/5))\n* [Demián Rodriguez](https://github.com/demian85)\n    (fixed [issue #7](https://github.com/Kijewski/node-mysql-pool/issues/7))\n\n<a name=\"Compatibility\"></a>\n<h2>Compatibility</h2>\n\nThis module was only tested using node >= 0.4.x. It does not work with older\nversions of node.js.\n\nThe node-mysql-pool even works with unknown forks of node-mysql, as long as\n\n* the last parameter of any method is the callback function,\n* no events *at all* are emitted when supplying a callback function, and\n* when the first parameter of a callback is set, it denotes an error.\n\nOtherwise the requirements are the same as for\n[node-mysql](https://github.com/felixge/node-mysql/blob/master/Readme.md).\n\n<a name=\"Installation\"></a>\n<h2>Installation</h2>\n\n* Using [npm](http://npmjs.org/): `npm install mysql-pool`\n* Using git:\n    * `git clone git@github.com:Kijewski/node-mysql-pool.git node-mysql-pool`\n    *     *or*\n    * `git submodule add git@github.com:Kijewski/node-mysql-pool.git deps/node-mysql-pool`\n\n<a name=\"API\"></a>\n<h2>API</h2>\n\nThe API of this module is as similar to node-mysql as possible, with two exceptions:\n\n* You must always supply a callback function. Using listeners is not supported.\n* Property `x`, when not supplied while creation, are to be set to `instance.properties.x`.\n\nWhen called back, `this` will be the used connection. (You probably never need to\nknow which connection was actually used.)\n\n<a name=\"NewPool\"></a>\n<h3>Creation of a new pool</h3>\n\n    mysqlPool.Pool([options])\n\ncreates a new, currently empty. Any property for the single connections or\nthe connectionpool, resp., can be set using the `options` object.\n\nIf the parameter `poolsize` is omitted, 1 is used.\n\nOnly if all connection attemps failed `err` is supplied.\nIf some connections failed, `result.error` will contain a list of Errors.\nIf some or all connections succeeded, `results.connections` will contains the pool's size.\n\n<a name=\"Options\"></a>\n<h3>Options</h3>\n\nDefaults:\n\n    pool.poolSize = 1\n    pool.mysql = require(\"mysql\")\n\n* `pool.poolSize`:\n    * The number of connections to establish to the server.\n* `pool.mysql`:\n    * If you do not want the npm version of node-mysql—e.g. because you forked and\n      tweaked it for your purposes—you can supply a different library to use.\n* `pool.properties.xyz = undefined`:\n    * Property `xyz` of the `mysql.Client` object.\n      See the [original documentation](https://github.com/felixge/node-mysql/blob/master/Readme.md)\n      of node-mysql for more property related information.\n\n<a name=\"AllConnections\"></a>\n<h3>Methods affecting all connections</h3>\n\n    client.useDatabase(database, cb)\n    client.end([cb])\n    client.destroy()\n\n* `pool.useDatabase(database, cb)`:\n    * Changes the database for every connection.\n* `pool.end([cb])`:\n    * Shuts down every connection, not waiting for any enqueued and waiting queries.\n      Active queries won't be aborted, though.\n* `pool.destroy()`:\n    * Kills every connection. You do not want do use this method!\n\nFor all methods you can [invoke on a single connection](#SingleConnection), there is\nan equivalent `methodnameAll(...)` method. E.g. you can use `pool.pingAll(cb)`, if\nyou want you to ping all connections for some reason.\n\n`cb` will be called once for every connection affected. [Subject to change!](#Todo)\n\n<a name=\"SingleConnection\"></a>\n<h3>Methods invoked on a single connection</h3>\n\nAll methods of the `Client` object will be supported—with `connect(...)`, `end(...)`,\n`useDatabase(...)` and `destroy(...)` being overwritten.\n\nIf you do not use a fork, that are currently:\n\n    query(sql, [params], cb)\n    ping([cb]))\n    statistics([cb])\n\nSee the [original documentation](https://github.com/felixge/node-mysql/blob/master/Readme.md)\nof node-mysql for method related information.\n\n**Beware:**\n\n* You must supply a callback method, if you have *any* parameters.\n* No events are emitted but [error](#EventError).\n\n<a name=\"NoConnection\"></a>\n<h3>Methods unrelated to connections</h3>\n\n    format(sql, params)\n    escape(val)\n\nWill behave exactly like the original methods. They do not belong to a single\nconnection.\n\n<a name=\"EventError\"></a>\n<h3>event: 'error' (err)</h3>\n\nEmitted if and only if an error occurred and no callback function was supplied.\nYou should always supply a callback function!\n\n<a name=\"Todo\"></a>\n<h2>Todo</h2>\n\n* The methods affecting all connections have a strange API. `cb` should be called\n  only once.\n\n\n<a name=\"Licence\"></a>\n<h2>Licence</h2>\n\nnode-mysql-pool is licensed under the\n[MIT license](https://github.com/Kijewski/node-mysql-pool/blob/master/License).\n",
  "readmeFilename": "Readme.md",
  "_id": "mysql-pool@0.2.2",
  "_from": "mysql-pool@"
}
